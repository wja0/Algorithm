#include <iostream>
using namespace std;
// 연속 : 앞에 있는 수를 제외하고 사용
// D[i][j] = i를 1,2,3의 합으로 나타내는 방법의 수, 마지막에 사용한 수는 j
// D[i][1] = i를 1,2,3의 합으로 나타내는 방법의 수, 마지막에 사용한 수는 1
// ==> 바로 전에 사용할 수 있는 수는 2, 3 = D[i-1][2] + D[i-1][3]
// D[i][2] = D[i-2][1] + D[i-2][3]
// D[i][3] = D[i-3][1] + D[i-3][2]
// 예외처리
// D[i][1]= D[i-1][2] + D[i-1][3]에서
// 1. i == 1 이면 1 (처음 쓰인 수)
// 2. i < 1 이면 0 (존재 불가)
long long D[100002][4];
// 나머지 처리 필수
// 1부터니깐 D크기 100002까지
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int T;
    cin >> T;
    while (T--)
    {
        int n;
        cin >> n;
        for (int i = 1; i <= n; i++)
        {
            if (i == 1)
            {
                D[i][1] = 1;
            }
            if (i == 2)
            {
                D[i][2] = 1;
            }
            if (i == 3)
            {
                D[i][3] = 1;
            }
            if (i < 1)
            {
                D[i][1] = 0;
            }
            if (i < 2)
            {
                D[i][2] = 0;
            }
            if (i < 3)
            {
                D[i][3] = 0;
            }
            if (i > 1)
            {
                D[i][1] = (D[i - 1][2] + D[i - 1][3]) % 1000000009;
            }
            if (i > 2)
            {
                D[i][2] = (D[i - 2][1] + D[i - 2][3]) % 1000000009;
            }
            if (i > 3)
            {
                D[i][3] = (D[i - 3][1] + D[i - 3][2]) % 1000000009;
            }
        }
        cout << (D[n][1] + D[n][2] + D[n][3]) % 1000000009 << '\n';
    }
    return 0;
}