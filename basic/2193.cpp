#include <iostream>
using namespace std;
// 0과 1로 이루어진 이진수
// 0으로 시작하지 않고 11을 부분 문자열로 갖지 않는 이친수
// N자리 이친수의 개수 구하기
long long D[92][2];
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int n;
    cin >> n;
    D[1][0] = 0;
    D[1][1] = 1;
    for (int i = 2; i <= n; i++)
    {
        D[i][0] = D[i - 1][1] + D[i - 1][0];
        D[i][1] = D[i - 1][0];
    }
    cout << D[n][0] + D[n][1];
    return 0;
}
// 해설
// D[N][L] = N자리 이친수 마지막 수 L
// 1) D[N][0] = D[N-1][0] + D[N-1][1]
// 2) D[N][1] = D[N-1][0]
// 예외처리
// D[1][0] = 0 (불가능)
// D[1][1] = 1

// 1차원 사용
// D[N] = N자리 이친수
// 1) 마지막수 0  => 그냥 D[N-1] (0이든 1이든 그냥 그 다음에 0 붙이기)
// 2) 마지막수 1  => 반드시 앞에 0이 온다.
// 0 or 1이 오면 그다음엔 무조건 0과 1이 함께 온다. => D[N-2]라고 생각
// D[N] = D[N-1] + D[N-2]